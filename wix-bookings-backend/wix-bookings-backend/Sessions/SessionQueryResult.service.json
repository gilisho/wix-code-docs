{ "name": "SessionQueryResult",
  "memberOf": "wix-bookings-backend.Sessions",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 2,
      "filename": "SessionQueryResult.js" },
  "docs":
    { "summary": "The results of a session query, containing the retrieved items.",
      "description":
        [ "When you execute a query with the [`find()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/find)",
          " function, it returns a Promise that resolves to a `SessionQueryResult` object.",
          " This object contains the items that match the query, information about the",
          " query itself, and functions for paging through the query results." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentPage",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 108,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns the index of the current results page number.",
            "description":
              [ "The `currentPage` is a zero-based index of the current page of results.",
                "",
                " The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit)",
                " function, can be retrieved using the [`pageSize`](wix-bookings-backend.Sessions-obj/sessionqueryresult/pageSize) property, and",
                " navigating through pages is done with the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and",
                " [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions.",
                "",
                " The `currentPage` property returns `undefined` if the query returned no results." ],
            "links": [],
            "examples":
              [ { "title": "Get the current page index of a query result",
                  "body":
                    [ "let resultPage = results.currentPage; // 0" ],
                  "extra":
                    {  } },
                { "title": "Perform a query and get the current page index of the query result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    let resultPage = results.currentPage; // 0",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "items",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "wix-bookings-backend.Sessions.Session" ] },
        "locations":
          [ { "lineno": 12,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns an array of sessions that match the query.",
            "description":
              [ "The current page of sessions retrieved by the query.",
                "",
                " The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit)",
                " function, can be retrieved using the [`pageSize`](wix-bookings-backend.Sessions-obj/sessionqueryresult/pageSize) property, and",
                " navigating through pages is done with the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and",
                " [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions.",
                "",
                " When no items match the query, the `items` array is empty." ],
            "links": [],
            "examples":
              [ { "title": "Perform a query and get the booking items from the result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .limit(3)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items; // see below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "",
                      "",
                      " /* items:",
                      "  * [",
                      "  *   {",
                      "  *     \"end\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 1,",
                      "  *         \"dayOfMonth\": 1,",
                      "  *         \"hourOfDay\": 11,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       },",
                      "  *       \"timestamp\": \"2021-01-01T09:00:00.000Z\"",
                      "  *     },",
                      "  *     \"_id\": \"193ZPR9ppP9emJUCLevcLf6orynNEIDt5nc0520xjGQILnPPaF5s62yK3BWz7ExgIRM1HunZjEPUQ0IeScwcTFJNXEmLG",
                      "  *      2g6Q8tvUJQZrPhU6XKhVrlLZraC3YcVfygADFiCPyyy5IVhgtDpF30FnPyAfRlaKIZBYKZ7hecrLpc4IKfAjXfnjVsxRwA",
                      "  *      5jHGIcoinGxwUbZcBZk6hPLwOq0lSTMyJPmB6SgSbe6KkOCOqX5HYzz3YpslCnfAPd0NPWyhGgIvqYUVymBRNuDq3saWki",
                      "  *      ZjLoL4JZtJp0b42Xuf9PQMUmsri7RUuaGTv6j1QrqcatPbbQ8PJzp\",",
                      "  *     \"notes\": \"\",",
                      "  *     \"recurringSessionId\": \"53616b1f0c3c45a1b282675acd248179-44539bfb63ae496693109b6cb3a65a65\",",
                      "  *     \"scheduleId\": \"53616b1f-0c3c-45a1-b282-675acd248179\",",
                      "  *     \"scheduleOwnerId\": \"b71df756-309f-468e-aec2-f82b9a9a9441\",",
                      "  *     \"start\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 1,",
                      "  *         \"dayOfMonth\": 1,",
                      "  *         \"hourOfDay\": 10,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       },",
                      "  *       \"timestamp\": \"2021-01-01T08:00:00.000Z\"",
                      "  *     },",
                      "  *     \"status\": \"CONFIRMED\",",
                      "  *     \"tags\": [",
                      "  *       \"GROUP\"",
                      "  *     ],",
                      "  *     \"type\": \"EVENT\"",
                      "  *   },",
                      "  *   {",
                      "  *     \"end\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 1,",
                      "  *         \"dayOfMonth\": 4,",
                      "  *         \"hourOfDay\": 18,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       },",
                      "  *       \"timestamp\": \"2021-01-04T16:00:00.000Z\"",
                      "  *     },",
                      "  *     \"_id\": \"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg",
                      "  *     62YOeTGcgvAnGyw6uKEiNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFlV7u2wmfZmcjnaGKeU15ZlbLQhG2uvyCf0hQuk",
                      "  *     6tKFmzj3xdqdDjdlKJCrJs2cslMgLxIotwGRWgipZJM2wzo6c2XCSUYjYWHe7FmpcExTyKZ2JUD9iftin96C2Y6nYREYoJ",
                      "  *     MXYFzBBtdmoQprQkm5dXOPg2oUWasimBH1Y2EehSBEWVmKxAmH12IH\",",
                      "  *     \"notes\": \"\",",
                      "  *     \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-ecc4a5932acb4b7bb8c27c6ffb57fd49\",",
                      "  *     \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *     \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *     \"start\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 1,",
                      "  *         \"dayOfMonth\": 4,",
                      "  *         \"hourOfDay\": 10,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       },",
                      "  *       \"timestamp\": \"2021-01-04T08:00:00.000Z\"",
                      "  *     },",
                      "  *     \"status\": \"CONFIRMED\",",
                      "  *     \"tags\": [],",
                      "  *     \"type\": \"WORKING_HOURS\"",
                      "  *   },",
                      "  *   {",
                      "  *     \"end\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 1,",
                      "  *         \"dayOfMonth\": 6,",
                      "  *         \"hourOfDay\": 18,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       },",
                      "  *       \"timestamp\": \"2021-01-06T16:00:00.000Z\"",
                      "  *     },",
                      "  *     \"_id\": \"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg",
                      "  *      62YOeTGcgvAnGyw6uKEiNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFkPrsq3Jhjbq8UeqhF4rOEyqzl3ZcVqpQtlI8Yy",
                      "  *      o6yRlAnbAWq5pradMKsvlkHC4QPrB5AcrYvmfDjteuRaWbm5JFSng4LouD3sCED8MUALsTSuUor4yNxYzE8aucYxUDpauU",
                      "  *      XDmkbSk0bmcpWVUwE6D79ogsY1libzXvGgJLxujpZFokC1fWNiLWwv\",",
                      "  *     \"notes\": \"\",",
                      "  *     \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-3d6b38529f544674a4976eca75e584ca\",",
                      "  *     \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *     \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *     \"start\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 1,",
                      "  *         \"dayOfMonth\": 6,",
                      "  *         \"hourOfDay\": 10,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       },",
                      "  *       \"timestamp\": \"2021-01-06T08:00:00.000Z\"",
                      "  *     },",
                      "  *     \"status\": \"CONFIRMED\",",
                      "  *     \"tags\": [],",
                      "  *     \"type\": \"WORKING_HOURS\"",
                      "  *   }",
                      "  * ]",
                      "  */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "length",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 32,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns the number of items in the current results page.",
            "description":
              [ "The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit)",
                " function, can be retrieved using the [`pageSize`](wix-bookings-backend.Sessions-obj/sessionqueryresult/pageSize) property, and",
                " navigating through pages is done with the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and",
                " [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get the length of a query result",
                  "body":
                    [ "let resultLength = results.length; // 20" ],
                  "extra":
                    {  } },
                { "title": "Perform a query and get the length of the result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    let resultLength = results.length; // 20",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "pageSize",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 77,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns the query page size.",
            "description":
              [ "The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit) function, can be retrieved using ",
                "the `pageSize` property, and navigating through pages is done with ",
                "the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and  [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get the page size of a query result",
                  "body":
                    [ "let resultPageSize = results.pageSize; // 50" ],
                  "extra":
                    {  } },
                { "title": "Perform a query and get the page size of the query result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    let resultPageSize = results.pageSize; // 50",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "query",
        "labels": [],
        "get": true,
        "set": false,
        "type": "wix-bookings-backend.Sessions.SessionQueryBuilder",
        "locations":
          [ { "lineno": 64,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns the `SessionQueryBuilder` object used to get the current results.",
            "description":
              [ "Use the `query` property to create and run a new query by chaining additional `SessionQueryBuilder` functions to it. You can only filter on properties that have not already been used in the previous query." ],
            "links": [],
            "examples":
              [ { "title": "Get the query that produced a query result",
                  "body":
                    [ "let resultQuery = results.query;" ],
                  "extra":
                    {  } },
                { "title": "Perform a query and get the query that produced the result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    let newQuery = results.query;",
                      "    newQuery",
                      "      .ge(\"startTime\", \"2021-01-01T15:21:41.960Z\")",
                      "      .find()",
                      "      .then((newQueryResults) => {",
                      "        let firstItem = newQueryResults.items[0];",
                      "      })",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalCount",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 49,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns the total number of items that match the query.",
            "description":
              [ "The `totalCount` returns the total number of items that match the query,",
                " not just the number of items in the current page." ],
            "links": [],
            "examples":
              [ { "title": "Get the number of items in a query result",
                  "body":
                    [ "let resultCount = results.totalCount; // 150" ],
                  "extra":
                    {  } },
                { "title": "Perform a query and get the number of items in the result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    let resultCount = results.totalCount; // 150",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalPages",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 92,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Returns the total number of pages the query produced.",
            "description":
              [ "The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit)",
                " function, can be retrieved using the [`pageSize`](wix-bookings-backend.Sessions-obj/sessionqueryresult/pageSize) property, and",
                " navigating through pages is done with the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and",
                " [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get the total number of pages in a query result",
                  "body":
                    [ "let resultPages = results.totalPages; // 3" ],
                  "extra":
                    {  } },
                { "title": "Perform a query and get the total number of pages in the query result",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "sessions.querySessions()",
                      "  .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    let resultPages = results.totalPages; // 3",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "hasNext",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "`true` if there are more results." },
        "locations":
          [ { "lineno": 173,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Indicates if the query has more results.",
            "links": [],
            "examples":
              [ { "title": "Get whether the query result object has more results",
                  "body":
                    [ "let hasNext = results.hasNext(); // true" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of query results",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "async function retrieveAllItems() {",
                      "  let allItems = [];",
                      "",
                      "  let results = await sessions.querySessions()",
                      "    .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "    .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "    .limit(100)",
                      "    .find();",
                      "  allItems = allItems.concat(results.items);",
                      "",
                      "  while (results.hasNext()) {",
                      "    results = await results.next();",
                      "    allItems = allItems.concat(results.items);",
                      "  }",
                      "  return allItems;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to get all query results, bypassing the maximum limit of 1000." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasPrev",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "`true` if there are previous results." },
        "locations":
          [ { "lineno": 183,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Indicates the query has previous results.",
            "links": [],
            "examples":
              [ { "title": "Get whether the query result object has previous results",
                  "body":
                    [ "let hasPrev = results.hasPrev(); // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-backend.Sessions.SessionQueryResult" ] },
            "doc": "Fulfilled - A query result object with the next page of query results.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 129,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Retrieves the next page of query results.",
            "description":
              [ "The `next()` function retrieves the next page of query results.",
                "",
                " The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit)",
                " function, can be retrieved using the [`pageSize`](wix-bookings-backend.Sessions-obj/sessionqueryresult/pageSize) property, and",
                " navigating through pages is done with the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and",
                " [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions.",
                "",
                " If items are added or removed between calls to `next()` the values returned",
                " by `BookingsQueryResult` may change." ],
            "links": [],
            "examples":
              [ { "title": "Get the next page of a query result",
                  "body":
                    [ "firstResults.next()",
                      "  .then((results) => {",
                      "    let newResults = results;",
                      "    let items = newResults.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = newResults.totalCount;",
                      "    let pageSize = newResults.pageSize;",
                      "    let currentPage = newResults.currentPage;",
                      "    let totalPages = newResults.totalPages;",
                      "    let hasNext = newResults.hasNext();",
                      "    let hasPrev = newResults.hasPrev();",
                      "    let length = newResults.length;",
                      "    let query = newResults.query;",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of query results",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "async function retrieveAllItems() {",
                      "  let allItems = [];",
                      "",
                      "  let results = await sessions.querySessions()",
                      "    .ge(\"end.timestamp\", \"2021-01-01T00:00:00.000Z\")",
                      "    .lt(\"start.timestamp\", \"2021-05-01T00:00:00.000Z\")",
                      "    .limit(100)",
                      "    .find();",
                      "  allItems = allItems.concat(results.items);",
                      "",
                      "  while (results.hasNext()) {",
                      "    results = await results.next();",
                      "    allItems = allItems.concat(results.items);",
                      "  }",
                      "  return allItems;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to get all query results, bypassing the maximum limit of 1000." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prev",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-backend.Sessions.SessionQueryResult" ] },
            "doc": "Fulfilled - A query result object with the previous page of query results.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 152,
              "filename": "SessionQueryResult.js" } ],
        "docs":
          { "summary": "Retrieves the previous page of query results.",
            "description":
              [ "The `prev()` function retrieves the previous page of query results.",
                "",
                " The page size is defined by the [`limit()`](wix-bookings-backend.Sessions-obj/sessionquerybuilder/limit)",
                " function, can be retrieved using the [`pageSize`](wix-bookings-backend.Sessions-obj/sessionqueryresult/pageSize) property, and",
                " navigating through pages is done with the [`prev()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/prev) and",
                " [`next()`](wix-bookings-backend.Sessions-obj/sessionqueryresult/next) functions.",
                "",
                " If items are added or removed between calls to `prev()` the values returned",
                " may change." ],
            "links": [],
            "examples":
              [ { "title": "Get the previous page of a query result",
                  "body":
                    [ "oldResults.prev()",
                      "  .then((results) => {",
                      "    let newResults = results;",
                      "    let items = newResults.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = newResults.totalCount;",
                      "    let pageSize = newResults.pageSize;",
                      "    let currentPage = newResults.currentPage;",
                      "    let totalPages = newResults.totalPages;",
                      "    let hasNext = newResults.hasNext();",
                      "    let hasPrev = newResults.hasPrev();",
                      "    let length = newResults.length;",
                      "    let query = newResults.query;",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }