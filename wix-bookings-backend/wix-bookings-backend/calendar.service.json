{ "name": "calendar",
  "memberOf": "wix-bookings-backend",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 41,
      "filename": "index.js" },
  "docs":
    { "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "queryCalendarSessions",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-bookings-backend.BookingsQueryBuilder_78990167910",
            "doc": "Contains functionality for refining a bookings query.\nThe `BookingsQueryBuilder` functions enable you to run, sort, filter, and control\nwhich results a query returns.\n\nTypically, you build a query using any of the bookings query functions,\nrefine the query by chaining `BookingsQueryBuilder` functions, and then execute the\nquery by chaining the [`find()`](#find) function.\n\nFor example, the following code queries...:\n\n```javascript\nimport wixBookingsBackend from 'wix-bookings-backend';\n\nwixBookingsBackend.queryBookings()\n  .eq(\"<property1>\", \"<value1>\")\n  .ascending(\"<property2>\")\n  .limit(5)\n  .find()\n  .then( (results) => {\n    console.log(results.items);\n  } );\n```" },
        "locations":
          [ { "lineno": 1,
              "filename": "com_wix_bookings_calendar_api_v1_CalendarService_ListSessions_queryCalendarSessions.js" } ],
        "docs":
          { "summary": "Returns sessions from the business calendar.",
            "description":
              [ "Query object support:",
                "- **filter**: supports",
                "- `from`: query range start time. Required when `recurringSessions` is false. Ignored when `recurringSessions` is true.",
                "- `to`: query range end time. Required when `recurringSessions` is false. Ignored when `recurringSessions` is true.",
                "- `scheduleIds`: filter by list of schedule ids. Up to 100 values are allowed. Required when `recurringSessions` is true.",
                "- `scheduleId`: deprecated, use `scheduleIds` instead.",
                "- `end.timestamp `|` .ge` query range from. `.ge(\"start.timestamp\",\"2020-04-27T10:00:00.000Z\")`|",
                "- `start.timestamp `| `.le` query range to. `.le(\"start.timestamp\",\"2020-04-27T10:00:00.000Z\")`|",
                "- `tags`: filter by list of tags. Ignored when `recurringSessions` is true.",
                "- `type`: filter by session type. Ignored when `recurringSessions` is true.",
                "- `hasCalendarConference`: filter sessions that have calendar conference created. Ignored when `recurringSessions` is true.",
                "- `intervalIds`: filter by list of interval ids. Ignored when `recurringSessions` is true.",
                "- `recurringSessionIds`: filter by a list of recurring session ids. Ignored when `recurringSessions` is true.",
                "- `scheduleOwnerIds`: the response will contain sessions with the given scheduleOwnerIds and sessions with affectedSchedules with the given scheduleOwnerIds. Ignored when `recurringSessions` is true.",
                "- `transparency`: when applied, the `scheduleOwnerIds` filter is required. In case the transparency = BUSY, the response will contain sessions with the given scheduleOwnerIds and sessions with affectedSchedules with the given scheduleOwnerIds where the owner's transparency is BUSY.",
                "When transparency = FREE, the response will contain only sessions and affectedSchedules with the given scheduleOwnerIds when the owner's transparency is FREE.",
                "- `contactIds`: The response contains sessions with participants with the given contactIds. Ignored when `recurringSessions` is true.",
                "- `recurringSessions`: Deprecated, use Recurrence instead. When set to 'true', only recurring sessions are returned. The default is `false`.",
                "- `recurrence`: Filter by `session.recurrence`, supports only `{\"$ne\": null}`",
                "- `location.locationType`: Filter by `session.location.location_type`. Supports multiple values. Possible values are `OWNER_BUSINESS`, `OWNER_CUSTOM` and `CUSTOM`. Optional. Currently not supported for recurring sessions.",
                "- `location.businessLocation.id`: Filter by `session.location.business_location.id`. Supports multiple values. Optional. Currently not supported for recurring sessions.",
                "- **fields**: supported.",
                "- **paging**: Paging is supported using the page token. For paging the results, i.e. with a page size of 10, set the `query.paging.limit` to a value of `10`.",
                "The response will contain a value in the `nextPageToken` field. Pass this value in the `pageToken` field in the following calls and leave the `query` field empty.",
                "- **fieldsets**: not supported.",
                "",
                "> **Permissions**",
                "> This endpoint requires the Read Bookings Calendar, the Read Bookings Calendar - Including Participants, the Read Bookings - Including Participants or the Manage Bookings permission." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { calendar } from \"wix-bookings-backend\";",
                      "",
                      "export function queryCalendarSessions() {",
                      "  const options = {",
                      "    listQuery: {",
                      "      filter: {",
                      "        someKey: \"some-value\"",
                      "      },",
                      "      sort: [",
                      "        {",
                      "          fieldName: \"a string\",",
                      "          order: \"ASC\"",
                      "        }",
                      "      ],",
                      "      fields: [\"a string\"],",
                      "      fieldsets: [\"a string\"],",
                      "      pagingMethod: {",
                      "        paging: {",
                      "          limit: 42,",
                      "          offset: 42",
                      "        }",
                      "      }",
                      "    }",
                      "  };",
                      "",
                      "  return calendar",
                      "    .queryCalendarSessions()",
                      "    .eq(\"key\", \"value\")",
                      "    .find(options)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } },
      { "name": "querySlots",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-bookings-backend.BookingsQueryBuilder_78990167910",
            "doc": "Contains functionality for refining a bookings query.\nThe `BookingsQueryBuilder` functions enable you to run, sort, filter, and control\nwhich results a query returns.\n\nTypically, you build a query using any of the bookings query functions,\nrefine the query by chaining `BookingsQueryBuilder` functions, and then execute the\nquery by chaining the [`find()`](#find) function.\n\nFor example, the following code queries...:\n\n```javascript\nimport wixBookingsBackend from 'wix-bookings-backend';\n\nwixBookingsBackend.queryBookings()\n  .eq(\"<property1>\", \"<value1>\")\n  .ascending(\"<property2>\")\n  .limit(5)\n  .find()\n  .then( (results) => {\n    console.log(results.items);\n  } );\n```" },
        "locations":
          [ { "lineno": 1,
              "filename": "com_wix_bookings_calendar_api_v1_CalendarService_ListSlots_querySlots.js" } ],
        "docs":
          { "summary": "Returns the schedule slots, calculated by the schedule's availability specification.",
            "description":
              [ "Query object support:",
                "- **filter**: supports",
                "- `scheduleIds`: scheduleIds represent the schedule of the sessions. Required.",
                "The Min list size is 1 and Max is 100. All other filters are optional.",
                "- `scheduleOwnerIds`: the response will contain slots only with the given scheduleOwnerIds.",
                "- `from`: query range start time. Default is now.",
                "- `to`: query range end time. Default is (now + 7 days).",
                "- `isAvailable`: By default returned slots will include full capacity sessions. Filter.isAvailable = false is not supported.",
                "- `location.businessLocation.id`: Filter by `slot.location.business_location.id`. Supports multiple values. Optional.",
                "- **fields**: supported.",
                "- **paging**: Paging is supported using the page token. For paging the results, i.e. with a page size of 10, set the `query.paging.limit` to a value of `10`.",
                "The response will contain a value in the `nextPageToken` field. Pass this value in the `pageToken` field in the following calls and leave the `query` field empty.",
                "- **fieldsets**: not supported.",
                "",
                "",
                "**Query filter example:**",
                "```",
                "{\"scheduleIds\": [\"66a2674c-9267-4600-826e-f463957b9446\", \"66a2674c-9267-4600-826e-f463957b9447\"] , \"from\": \"2019-02-17T13:08:43.000Z\" , \"to\": \"2019-02-17T14:08:43.000Z\",\"isAvailable\": true}).",
                "```",
                "```",
                "{\"scheduleIds\": [\"66a2674c-9267-4600-826e-f463957b9446\", \"66a2674c-9267-4600-826e-f463957b9447\"], \"scheduleOwnerIds\": [\"95a2624a-8797-84229-a678-57b9448482b\"] , \"from\": \"2019-02-17T13:08:43.000Z\" , \"to\": \"2019-02-17T14:08:43.000Z\"}).",
                "```",
                "> **Permissions**",
                "> This endpoint requires the Read Bookings Calendar Availability, the Read Bookings Calendar, the Read Bookings - Public Data, the Read Bookings - Including Participants or the Manage Bookings permission scope." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { calendar } from \"wix-bookings-backend\";",
                      "",
                      "export function querySlots() {",
                      "  const options = {",
                      "    listQuery: {",
                      "      filter: {",
                      "        someKey: \"some-value\"",
                      "      },",
                      "      sort: [",
                      "        {",
                      "          fieldName: \"a string\",",
                      "          order: \"ASC\"",
                      "        }",
                      "      ],",
                      "      fields: [\"a string\"],",
                      "      fieldsets: [\"a string\"],",
                      "      pagingMethod: {",
                      "        paging: {",
                      "          limit: 42,",
                      "          offset: 42",
                      "        }",
                      "      }",
                      "    }",
                      "  };",
                      "",
                      "  return calendar",
                      "    .querySlots()",
                      "    .eq(\"key\", \"value\")",
                      "    .find(options)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }